
c:/Users/Family/morse_code/src/morse_code_v1/target/2.3.0/photon/morse_code_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001294  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a12b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a12b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000574  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1324  080a1324  00021324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a134c  080a134c  0002134c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e9653  00000000  00000000  00021350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011671  00000000  00000000  0010a9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012b1c  00000000  00000000  0011c014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b98  00000000  00000000  0012eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004050  00000000  00000000  001306c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024cf4  00000000  00000000  00134718  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026129  00000000  00000000  0015940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ab16b  00000000  00000000  0017f535  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000043b8  00000000  00000000  0022a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ffdb 	bl	80a0fe8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ffe3 	bl	80a1004 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a12b4 	.word	0x080a12b4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200005e1 	.word	0x200005e1
 80a0058:	200005e1 	.word	0x200005e1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc21 	bl	80a08a4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1288 	.word	0x080a1288
 80a0080:	080a12a4 	.word	0x080a12a4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f819 	bl	80a00c0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bbbf 	b.w	80a0814 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bae5 	b.w	80a0664 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 baeb 	b.w	80a0674 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

// setup() runs once, when the device is first turned on.
int led1 = D7; 

void setup() {
  pinMode(led1, OUTPUT);
 80a00b0:	4b02      	ldr	r3, [pc, #8]	; (80a00bc <setup+0xc>)
 80a00b2:	2101      	movs	r1, #1
 80a00b4:	8818      	ldrh	r0, [r3, #0]
 80a00b6:	f000 bf17 	b.w	80a0ee8 <pinMode>
 80a00ba:	bf00      	nop
 80a00bc:	20000000 	.word	0x20000000

080a00c0 <loop>:

}
void loop() {
 80a00c0:	b510      	push	{r4, lr}
  // My firstname in Morse Code, Menachem
// -- . -. .- -.-. .... . --
  
  //dash
  digitalWrite(led1, HIGH);
 80a00c2:	4ca4      	ldr	r4, [pc, #656]	; (80a0354 <loop+0x294>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	8820      	ldrh	r0, [r4, #0]
 80a00c8:	f000 ff1f 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a00cc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a00d0:	f000 fb60 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a00d4:	2100      	movs	r1, #0
 80a00d6:	8820      	ldrh	r0, [r4, #0]
 80a00d8:	f000 ff17 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a00dc:	20c8      	movs	r0, #200	; 0xc8
 80a00de:	f000 fb59 	bl	80a0794 <delay>
  //dash
  digitalWrite(led1, HIGH);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	8820      	ldrh	r0, [r4, #0]
 80a00e6:	f000 ff10 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a00ea:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a00ee:	f000 fb51 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a00f2:	2100      	movs	r1, #0
 80a00f4:	8820      	ldrh	r0, [r4, #0]
 80a00f6:	f000 ff08 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a00fa:	20c8      	movs	r0, #200	; 0xc8
 80a00fc:	f000 fb4a 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a0100:	2100      	movs	r1, #0
 80a0102:	8820      	ldrh	r0, [r4, #0]
 80a0104:	f000 ff01 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a0108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a010c:	f000 fb42 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a0110:	2101      	movs	r1, #1
 80a0112:	8820      	ldrh	r0, [r4, #0]
 80a0114:	f000 fef9 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a011c:	f000 fb3a 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0120:	2100      	movs	r1, #0
 80a0122:	8820      	ldrh	r0, [r4, #0]
 80a0124:	f000 fef1 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0128:	20c8      	movs	r0, #200	; 0xc8
 80a012a:	f000 fb33 	bl	80a0794 <delay>
    //space
  digitalWrite(led1, LOW);
 80a012e:	2100      	movs	r1, #0
 80a0130:	8820      	ldrh	r0, [r4, #0]
 80a0132:	f000 feea 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a0136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a013a:	f000 fb2b 	bl	80a0794 <delay>
    //dash
  digitalWrite(led1, HIGH);
 80a013e:	2101      	movs	r1, #1
 80a0140:	8820      	ldrh	r0, [r4, #0]
 80a0142:	f000 fee2 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a0146:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a014a:	f000 fb23 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a014e:	2100      	movs	r1, #0
 80a0150:	8820      	ldrh	r0, [r4, #0]
 80a0152:	f000 feda 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0156:	20c8      	movs	r0, #200	; 0xc8
 80a0158:	f000 fb1c 	bl	80a0794 <delay>
    // dot
digitalWrite(led1, HIGH);
 80a015c:	2101      	movs	r1, #1
 80a015e:	8820      	ldrh	r0, [r4, #0]
 80a0160:	f000 fed3 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0164:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0168:	f000 fb14 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a016c:	2100      	movs	r1, #0
 80a016e:	8820      	ldrh	r0, [r4, #0]
 80a0170:	f000 fecb 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0174:	20c8      	movs	r0, #200	; 0xc8
 80a0176:	f000 fb0d 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a017a:	2100      	movs	r1, #0
 80a017c:	8820      	ldrh	r0, [r4, #0]
 80a017e:	f000 fec4 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a0182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0186:	f000 fb05 	bl	80a0794 <delay>
   // dot
digitalWrite(led1, HIGH);
 80a018a:	2101      	movs	r1, #1
 80a018c:	8820      	ldrh	r0, [r4, #0]
 80a018e:	f000 febc 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0192:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0196:	f000 fafd 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a019a:	2100      	movs	r1, #0
 80a019c:	8820      	ldrh	r0, [r4, #0]
 80a019e:	f000 feb4 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a01a2:	20c8      	movs	r0, #200	; 0xc8
 80a01a4:	f000 faf6 	bl	80a0794 <delay>
  //dash
  digitalWrite(led1, HIGH);
 80a01a8:	2101      	movs	r1, #1
 80a01aa:	8820      	ldrh	r0, [r4, #0]
 80a01ac:	f000 fead 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a01b0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a01b4:	f000 faee 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a01b8:	2100      	movs	r1, #0
 80a01ba:	8820      	ldrh	r0, [r4, #0]
 80a01bc:	f000 fea5 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a01c0:	20c8      	movs	r0, #200	; 0xc8
 80a01c2:	f000 fae7 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a01c6:	2100      	movs	r1, #0
 80a01c8:	8820      	ldrh	r0, [r4, #0]
 80a01ca:	f000 fe9e 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a01ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01d2:	f000 fadf 	bl	80a0794 <delay>
  //dash
  digitalWrite(led1, HIGH);
 80a01d6:	2101      	movs	r1, #1
 80a01d8:	8820      	ldrh	r0, [r4, #0]
 80a01da:	f000 fe96 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a01de:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a01e2:	f000 fad7 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a01e6:	2100      	movs	r1, #0
 80a01e8:	8820      	ldrh	r0, [r4, #0]
 80a01ea:	f000 fe8e 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a01ee:	20c8      	movs	r0, #200	; 0xc8
 80a01f0:	f000 fad0 	bl	80a0794 <delay>
   // dot
digitalWrite(led1, HIGH);
 80a01f4:	2101      	movs	r1, #1
 80a01f6:	8820      	ldrh	r0, [r4, #0]
 80a01f8:	f000 fe87 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a01fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0200:	f000 fac8 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0204:	2100      	movs	r1, #0
 80a0206:	8820      	ldrh	r0, [r4, #0]
 80a0208:	f000 fe7f 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a020c:	20c8      	movs	r0, #200	; 0xc8
 80a020e:	f000 fac1 	bl	80a0794 <delay>
    //dash
  digitalWrite(led1, HIGH);
 80a0212:	2101      	movs	r1, #1
 80a0214:	8820      	ldrh	r0, [r4, #0]
 80a0216:	f000 fe78 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a021a:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a021e:	f000 fab9 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0222:	2100      	movs	r1, #0
 80a0224:	8820      	ldrh	r0, [r4, #0]
 80a0226:	f000 fe70 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a022a:	20c8      	movs	r0, #200	; 0xc8
 80a022c:	f000 fab2 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a0230:	2101      	movs	r1, #1
 80a0232:	8820      	ldrh	r0, [r4, #0]
 80a0234:	f000 fe69 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0238:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a023c:	f000 faaa 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0240:	2100      	movs	r1, #0
 80a0242:	8820      	ldrh	r0, [r4, #0]
 80a0244:	f000 fe61 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0248:	20c8      	movs	r0, #200	; 0xc8
 80a024a:	f000 faa3 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a024e:	2100      	movs	r1, #0
 80a0250:	8820      	ldrh	r0, [r4, #0]
 80a0252:	f000 fe5a 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a0256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a025a:	f000 fa9b 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a025e:	2101      	movs	r1, #1
 80a0260:	8820      	ldrh	r0, [r4, #0]
 80a0262:	f000 fe52 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0266:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a026a:	f000 fa93 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a026e:	2100      	movs	r1, #0
 80a0270:	8820      	ldrh	r0, [r4, #0]
 80a0272:	f000 fe4a 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0276:	20c8      	movs	r0, #200	; 0xc8
 80a0278:	f000 fa8c 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a027c:	2101      	movs	r1, #1
 80a027e:	8820      	ldrh	r0, [r4, #0]
 80a0280:	f000 fe43 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a0284:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0288:	f000 fa84 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a028c:	2100      	movs	r1, #0
 80a028e:	8820      	ldrh	r0, [r4, #0]
 80a0290:	f000 fe3b 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a0294:	20c8      	movs	r0, #200	; 0xc8
 80a0296:	f000 fa7d 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a029a:	2101      	movs	r1, #1
 80a029c:	8820      	ldrh	r0, [r4, #0]
 80a029e:	f000 fe34 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a02a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a02a6:	f000 fa75 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a02aa:	2100      	movs	r1, #0
 80a02ac:	8820      	ldrh	r0, [r4, #0]
 80a02ae:	f000 fe2c 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a02b2:	20c8      	movs	r0, #200	; 0xc8
 80a02b4:	f000 fa6e 	bl	80a0794 <delay>
  // dot
digitalWrite(led1, HIGH);
 80a02b8:	2101      	movs	r1, #1
 80a02ba:	8820      	ldrh	r0, [r4, #0]
 80a02bc:	f000 fe25 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a02c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a02c4:	f000 fa66 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a02c8:	2100      	movs	r1, #0
 80a02ca:	8820      	ldrh	r0, [r4, #0]
 80a02cc:	f000 fe1d 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a02d0:	20c8      	movs	r0, #200	; 0xc8
 80a02d2:	f000 fa5f 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a02d6:	2100      	movs	r1, #0
 80a02d8:	8820      	ldrh	r0, [r4, #0]
 80a02da:	f000 fe16 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a02de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02e2:	f000 fa57 	bl	80a0794 <delay>
    // dot
digitalWrite(led1, HIGH);
 80a02e6:	2101      	movs	r1, #1
 80a02e8:	8820      	ldrh	r0, [r4, #0]
 80a02ea:	f000 fe0e 	bl	80a0f0a <digitalWrite>
  delay(300);
 80a02ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a02f2:	f000 fa4f 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a02f6:	2100      	movs	r1, #0
 80a02f8:	8820      	ldrh	r0, [r4, #0]
 80a02fa:	f000 fe06 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a02fe:	20c8      	movs	r0, #200	; 0xc8
 80a0300:	f000 fa48 	bl	80a0794 <delay>
  //space
  digitalWrite(led1, LOW);
 80a0304:	2100      	movs	r1, #0
 80a0306:	8820      	ldrh	r0, [r4, #0]
 80a0308:	f000 fdff 	bl	80a0f0a <digitalWrite>
  delay(1000);
 80a030c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0310:	f000 fa40 	bl	80a0794 <delay>
  //dash
  digitalWrite(led1, HIGH);
 80a0314:	2101      	movs	r1, #1
 80a0316:	8820      	ldrh	r0, [r4, #0]
 80a0318:	f000 fdf7 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a031c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a0320:	f000 fa38 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0324:	2100      	movs	r1, #0
 80a0326:	8820      	ldrh	r0, [r4, #0]
 80a0328:	f000 fdef 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a032c:	20c8      	movs	r0, #200	; 0xc8
 80a032e:	f000 fa31 	bl	80a0794 <delay>
  //dash
  digitalWrite(led1, HIGH);
 80a0332:	2101      	movs	r1, #1
 80a0334:	8820      	ldrh	r0, [r4, #0]
 80a0336:	f000 fde8 	bl	80a0f0a <digitalWrite>
  delay(900);
 80a033a:	f44f 7061 	mov.w	r0, #900	; 0x384
 80a033e:	f000 fa29 	bl	80a0794 <delay>
  digitalWrite(led1, LOW);
 80a0342:	8820      	ldrh	r0, [r4, #0]
 80a0344:	2100      	movs	r1, #0
 80a0346:	f000 fde0 	bl	80a0f0a <digitalWrite>
  delay(200);
 80a034a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(200);
 80a034e:	20c8      	movs	r0, #200	; 0xc8
 80a0350:	f000 ba20 	b.w	80a0794 <delay>
 80a0354:	20000000 	.word	0x20000000

080a0358 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_Pin_Mode+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	689b      	ldr	r3, [r3, #8]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601b0 	.word	0x080601b0

080a0368 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_Get_Pin_Mode+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	68db      	ldr	r3, [r3, #12]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601b0 	.word	0x080601b0

080a0378 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_GPIO_Write+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	691b      	ldr	r3, [r3, #16]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601b0 	.word	0x080601b0

080a0388 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_RNG_GetRandomNumber+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	685b      	ldr	r3, [r3, #4]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	0806019c 	.word	0x0806019c

080a0398 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	695b      	ldr	r3, [r3, #20]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	0806019c 	.word	0x0806019c

080a03a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <os_mutex_recursive_create+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601d0 	.word	0x080601d0

080a03b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <os_mutex_recursive_destroy+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601d0 	.word	0x080601d0

080a03c8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <hal_usart_init+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	699b      	ldr	r3, [r3, #24]
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c4 	.word	0x080601c4

080a03d8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <hal_usart_write+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601c4 	.word	0x080601c4

080a03e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <hal_usart_available+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601c4 	.word	0x080601c4

080a03f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <hal_usart_read+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601c4 	.word	0x080601c4

080a0408 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <hal_usart_peek+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601c4 	.word	0x080601c4

080a0418 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <hal_usart_flush+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601c4 	.word	0x080601c4

080a0428 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b02      	ldr	r3, [pc, #8]	; (80a0434 <hal_usart_is_enabled+0xc>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0430:	9301      	str	r3, [sp, #4]
 80a0432:	bd08      	pop	{r3, pc}
 80a0434:	080601c4 	.word	0x080601c4

080a0438 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <hal_usart_available_data_for_write+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601c4 	.word	0x080601c4

080a0448 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <hal_i2c_write+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601ac 	.word	0x080601ac

080a0458 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <hal_i2c_available+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601ac 	.word	0x080601ac

080a0468 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <hal_i2c_read+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601ac 	.word	0x080601ac

080a0478 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <hal_i2c_peek+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601ac 	.word	0x080601ac

080a0488 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <hal_i2c_flush+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601ac 	.word	0x080601ac

080a0498 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <hal_i2c_is_enabled+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601ac 	.word	0x080601ac

080a04a8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b03      	ldr	r3, [pc, #12]	; (80a04b8 <hal_i2c_init+0x10>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a04b2:	9301      	str	r3, [sp, #4]
 80a04b4:	bd08      	pop	{r3, pc}
 80a04b6:	0000      	.short	0x0000
 80a04b8:	080601ac 	.word	0x080601ac

080a04bc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <hal_spi_init+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	69db      	ldr	r3, [r3, #28]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601b4 	.word	0x080601b4

080a04cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <hal_spi_is_enabled+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	6a1b      	ldr	r3, [r3, #32]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601b4 	.word	0x080601b4

080a04dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <HAL_USB_USART_Init+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	681b      	ldr	r3, [r3, #0]
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601d8 	.word	0x080601d8

080a04ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <HAL_USB_USART_Available_Data+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	691b      	ldr	r3, [r3, #16]
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601d8 	.word	0x080601d8

080a04fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601d8 	.word	0x080601d8

080a050c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <HAL_USB_USART_Receive_Data+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	699b      	ldr	r3, [r3, #24]
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601d8 	.word	0x080601d8

080a051c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <HAL_USB_USART_Send_Data+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	69db      	ldr	r3, [r3, #28]
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601d8 	.word	0x080601d8

080a052c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <HAL_USB_USART_Flush_Data+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	6a1b      	ldr	r3, [r3, #32]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601d8 	.word	0x080601d8

080a053c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <inet_gethostbyname+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c0 	.word	0x080601c0

080a054c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <set_system_mode+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	685b      	ldr	r3, [r3, #4]
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601a4 	.word	0x080601a4

080a055c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <system_delay_ms+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	695b      	ldr	r3, [r3, #20]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601a4 	.word	0x080601a4

080a056c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b03      	ldr	r3, [pc, #12]	; (80a057c <system_ctrl_set_app_request_handler+0x10>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0576:	9301      	str	r3, [sp, #4]
 80a0578:	bd08      	pop	{r3, pc}
 80a057a:	0000      	.short	0x0000
 80a057c:	080601a4 	.word	0x080601a4

080a0580 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b03      	ldr	r3, [pc, #12]	; (80a0590 <system_ctrl_set_result+0x10>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a058a:	9301      	str	r3, [sp, #4]
 80a058c:	bd08      	pop	{r3, pc}
 80a058e:	0000      	.short	0x0000
 80a0590:	080601a4 	.word	0x080601a4

080a0594 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <network_connect+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	685b      	ldr	r3, [r3, #4]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601c8 	.word	0x080601c8

080a05a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <network_connecting+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	689b      	ldr	r3, [r3, #8]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601c8 	.word	0x080601c8

080a05b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <network_disconnect+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	68db      	ldr	r3, [r3, #12]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601c8 	.word	0x080601c8

080a05c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <network_ready+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	691b      	ldr	r3, [r3, #16]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601c8 	.word	0x080601c8

080a05d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <network_on+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	695b      	ldr	r3, [r3, #20]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601c8 	.word	0x080601c8

080a05e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <network_off+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	699b      	ldr	r3, [r3, #24]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601c8 	.word	0x080601c8

080a05f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <network_listen+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	69db      	ldr	r3, [r3, #28]
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601c8 	.word	0x080601c8

080a0604 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <network_listening+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6a1b      	ldr	r3, [r3, #32]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601c8 	.word	0x080601c8

080a0614 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <network_set_listen_timeout+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601c8 	.word	0x080601c8

080a0624 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <network_get_listen_timeout+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601c8 	.word	0x080601c8

080a0634 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <network_is_on+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601c8 	.word	0x080601c8

080a0644 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <network_is_off+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601c8 	.word	0x080601c8

080a0654 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601cc 	.word	0x080601cc

080a0664 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <malloc+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	681b      	ldr	r3, [r3, #0]
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601a0 	.word	0x080601a0

080a0674 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <free+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	685b      	ldr	r3, [r3, #4]
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601a0 	.word	0x080601a0

080a0684 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <newlib_impure_ptr_callback+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601a0 	.word	0x080601a0

080a0694 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0694:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0696:	2600      	movs	r6, #0
 80a0698:	4604      	mov	r4, r0
 80a069a:	460d      	mov	r5, r1
 80a069c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a06a0:	f7ff fe82 	bl	80a03a8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a06a4:	4628      	mov	r0, r5
    _spi = spi;
 80a06a6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a06a8:	f7ff ff08 	bl	80a04bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a06ac:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a06ae:	6066      	str	r6, [r4, #4]
}
 80a06b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a06b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a06b4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a06b6:	2000      	movs	r0, #0
 80a06b8:	4b04      	ldr	r3, [pc, #16]	; (80a06cc <_GLOBAL__sub_I_System+0x18>)
 80a06ba:	601a      	str	r2, [r3, #0]
 80a06bc:	4b04      	ldr	r3, [pc, #16]	; (80a06d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a06be:	4a05      	ldr	r2, [pc, #20]	; (80a06d4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a06c0:	6018      	str	r0, [r3, #0]
 80a06c2:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a06c4:	7198      	strb	r0, [r3, #6]
 80a06c6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06c8:	f7ff bf40 	b.w	80a054c <set_system_mode>
 80a06cc:	2000007c 	.word	0x2000007c
 80a06d0:	20000070 	.word	0x20000070
 80a06d4:	ffff0000 	.word	0xffff0000

080a06d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06da:	4606      	mov	r6, r0
 80a06dc:	460d      	mov	r5, r1
  size_t n = 0;
 80a06de:	2400      	movs	r4, #0
 80a06e0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a06e2:	42bd      	cmp	r5, r7
 80a06e4:	d00c      	beq.n	80a0700 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06e6:	6833      	ldr	r3, [r6, #0]
 80a06e8:	4630      	mov	r0, r6
 80a06ea:	689b      	ldr	r3, [r3, #8]
 80a06ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a06f0:	4798      	blx	r3
     if (chunk>=0)
 80a06f2:	1e03      	subs	r3, r0, #0
 80a06f4:	db01      	blt.n	80a06fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a06f6:	441c      	add	r4, r3
  while (size--) {
 80a06f8:	e7f3      	b.n	80a06e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a06fa:	2c00      	cmp	r4, #0
 80a06fc:	bf08      	it	eq
 80a06fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0700:	4620      	mov	r0, r4
 80a0702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0704 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0704:	b570      	push	{r4, r5, r6, lr}
 80a0706:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0708:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a070a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a070c:	b149      	cbz	r1, 80a0722 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a070e:	f000 fca5 	bl	80a105c <strlen>
 80a0712:	682b      	ldr	r3, [r5, #0]
 80a0714:	4602      	mov	r2, r0
 80a0716:	4621      	mov	r1, r4
 80a0718:	4628      	mov	r0, r5
    }
 80a071a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a071e:	68db      	ldr	r3, [r3, #12]
 80a0720:	4718      	bx	r3
    }
 80a0722:	bd70      	pop	{r4, r5, r6, pc}

080a0724 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0724:	6803      	ldr	r3, [r0, #0]
 80a0726:	689b      	ldr	r3, [r3, #8]
 80a0728:	4718      	bx	r3

080a072a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a072a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a072c:	2a01      	cmp	r2, #1
 80a072e:	bf98      	it	ls
 80a0730:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0732:	b530      	push	{r4, r5, lr}
 80a0734:	b08b      	sub	sp, #44	; 0x2c
 80a0736:	460c      	mov	r4, r1
  *str = '\0';
 80a0738:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a073c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a073e:	4625      	mov	r5, r4
 80a0740:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0744:	fb04 5312 	mls	r3, r4, r2, r5
 80a0748:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a074a:	2b09      	cmp	r3, #9
 80a074c:	bf94      	ite	ls
 80a074e:	3330      	addls	r3, #48	; 0x30
 80a0750:	3337      	addhi	r3, #55	; 0x37
 80a0752:	b2db      	uxtb	r3, r3
  } while(n);
 80a0754:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0756:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a075a:	d9f0      	bls.n	80a073e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a075c:	f7ff ffd2 	bl	80a0704 <_ZN5Print5writeEPKc>
}
 80a0760:	b00b      	add	sp, #44	; 0x2c
 80a0762:	bd30      	pop	{r4, r5, pc}

080a0764 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0764:	2300      	movs	r3, #0
 80a0766:	6840      	ldr	r0, [r0, #4]
 80a0768:	461a      	mov	r2, r3
 80a076a:	4619      	mov	r1, r3
 80a076c:	f7ff bf32 	b.w	80a05d4 <network_on>

080a0770 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0770:	4b01      	ldr	r3, [pc, #4]	; (80a0778 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0772:	4a02      	ldr	r2, [pc, #8]	; (80a077c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0774:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0776:	4770      	bx	lr
 80a0778:	20000080 	.word	0x20000080
 80a077c:	080a1150 	.word	0x080a1150

080a0780 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0780:	4b02      	ldr	r3, [pc, #8]	; (80a078c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0782:	681a      	ldr	r2, [r3, #0]
 80a0784:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0786:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0788:	4770      	bx	lr
 80a078a:	bf00      	nop
 80a078c:	20000004 	.word	0x20000004
 80a0790:	20000084 	.word	0x20000084

080a0794 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0794:	2100      	movs	r1, #0
 80a0796:	f7ff bee1 	b.w	80a055c <system_delay_ms>
	...

080a079c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a079c:	2200      	movs	r2, #0
 80a079e:	4b01      	ldr	r3, [pc, #4]	; (80a07a4 <_GLOBAL__sub_I_RGB+0x8>)
 80a07a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a07a2:	4770      	bx	lr
 80a07a4:	20000088 	.word	0x20000088

080a07a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a07a8:	4b01      	ldr	r3, [pc, #4]	; (80a07b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a07aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a07ac:	4770      	bx	lr
 80a07ae:	bf00      	nop
 80a07b0:	20000008 	.word	0x20000008

080a07b4 <serialEventRun>:
{
 80a07b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a07b6:	4b13      	ldr	r3, [pc, #76]	; (80a0804 <serialEventRun+0x50>)
 80a07b8:	b143      	cbz	r3, 80a07cc <serialEventRun+0x18>
 80a07ba:	f000 f971 	bl	80a0aa0 <_Z16_fetch_usbserialv>
 80a07be:	6803      	ldr	r3, [r0, #0]
 80a07c0:	691b      	ldr	r3, [r3, #16]
 80a07c2:	4798      	blx	r3
 80a07c4:	2800      	cmp	r0, #0
 80a07c6:	dd01      	ble.n	80a07cc <serialEventRun+0x18>
        serialEvent();
 80a07c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a07cc:	4b0e      	ldr	r3, [pc, #56]	; (80a0808 <serialEventRun+0x54>)
 80a07ce:	b143      	cbz	r3, 80a07e2 <serialEventRun+0x2e>
 80a07d0:	f000 fa16 	bl	80a0c00 <_Z22__fetch_global_Serial1v>
 80a07d4:	6803      	ldr	r3, [r0, #0]
 80a07d6:	691b      	ldr	r3, [r3, #16]
 80a07d8:	4798      	blx	r3
 80a07da:	2800      	cmp	r0, #0
 80a07dc:	dd01      	ble.n	80a07e2 <serialEventRun+0x2e>
        serialEvent1();
 80a07de:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a07e2:	4b0a      	ldr	r3, [pc, #40]	; (80a080c <serialEventRun+0x58>)
 80a07e4:	b10b      	cbz	r3, 80a07ea <serialEventRun+0x36>
 80a07e6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a07ea:	4b09      	ldr	r3, [pc, #36]	; (80a0810 <serialEventRun+0x5c>)
 80a07ec:	b143      	cbz	r3, 80a0800 <serialEventRun+0x4c>
 80a07ee:	f000 f991 	bl	80a0b14 <_Z17_fetch_usbserial1v>
 80a07f2:	6803      	ldr	r3, [r0, #0]
 80a07f4:	691b      	ldr	r3, [r3, #16]
 80a07f6:	4798      	blx	r3
 80a07f8:	2800      	cmp	r0, #0
 80a07fa:	dd01      	ble.n	80a0800 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a07fc:	f3af 8000 	nop.w
}
 80a0800:	bd08      	pop	{r3, pc}
 80a0802:	bf00      	nop
	...

080a0814 <_post_loop>:
{
 80a0814:	b508      	push	{r3, lr}
	serialEventRun();
 80a0816:	f7ff ffcd 	bl	80a07b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a081a:	f7ff fdbd 	bl	80a0398 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a081e:	4b01      	ldr	r3, [pc, #4]	; (80a0824 <_post_loop+0x10>)
 80a0820:	6018      	str	r0, [r3, #0]
}
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	20000514 	.word	0x20000514

080a0828 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0828:	4805      	ldr	r0, [pc, #20]	; (80a0840 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a082a:	4a06      	ldr	r2, [pc, #24]	; (80a0844 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a082c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a082e:	1a12      	subs	r2, r2, r0
 80a0830:	4905      	ldr	r1, [pc, #20]	; (80a0848 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0832:	f000 fbd9 	bl	80a0fe8 <memcpy>
    __backup_sram_signature = signature;
 80a0836:	4b05      	ldr	r3, [pc, #20]	; (80a084c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0838:	4a05      	ldr	r2, [pc, #20]	; (80a0850 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a083a:	601a      	str	r2, [r3, #0]
}
 80a083c:	bd08      	pop	{r3, pc}
 80a083e:	bf00      	nop
 80a0840:	40024000 	.word	0x40024000
 80a0844:	40024004 	.word	0x40024004
 80a0848:	080a12b0 	.word	0x080a12b0
 80a084c:	40024000 	.word	0x40024000
 80a0850:	9a271c1e 	.word	0x9a271c1e

080a0854 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0854:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0856:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0858:	461a      	mov	r2, r3
 80a085a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a085e:	9300      	str	r3, [sp, #0]
 80a0860:	f7ff fe8e 	bl	80a0580 <system_ctrl_set_result>
}
 80a0864:	b003      	add	sp, #12
 80a0866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a086c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a086c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a086e:	8843      	ldrh	r3, [r0, #2]
 80a0870:	2b0a      	cmp	r3, #10
 80a0872:	d008      	beq.n	80a0886 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0874:	2b50      	cmp	r3, #80	; 0x50
 80a0876:	d10b      	bne.n	80a0890 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0878:	4b09      	ldr	r3, [pc, #36]	; (80a08a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a087a:	681b      	ldr	r3, [r3, #0]
 80a087c:	b14b      	cbz	r3, 80a0892 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a087e:	b003      	add	sp, #12
 80a0880:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0884:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0886:	f7ff ffe5 	bl	80a0854 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a088a:	b003      	add	sp, #12
 80a088c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0890:	2300      	movs	r3, #0
 80a0892:	461a      	mov	r2, r3
 80a0894:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0898:	9300      	str	r3, [sp, #0]
 80a089a:	f7ff fe71 	bl	80a0580 <system_ctrl_set_result>
}
 80a089e:	e7f4      	b.n	80a088a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a08a0:	2000009c 	.word	0x2000009c

080a08a4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a08a4:	2100      	movs	r1, #0
{
 80a08a6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a08a8:	4811      	ldr	r0, [pc, #68]	; (80a08f0 <module_user_init_hook+0x4c>)
 80a08aa:	f7ff feeb 	bl	80a0684 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a08ae:	4b11      	ldr	r3, [pc, #68]	; (80a08f4 <module_user_init_hook+0x50>)
 80a08b0:	681a      	ldr	r2, [r3, #0]
 80a08b2:	4b11      	ldr	r3, [pc, #68]	; (80a08f8 <module_user_init_hook+0x54>)
 80a08b4:	429a      	cmp	r2, r3
 80a08b6:	bf0c      	ite	eq
 80a08b8:	2201      	moveq	r2, #1
 80a08ba:	2200      	movne	r2, #0
 80a08bc:	4b0f      	ldr	r3, [pc, #60]	; (80a08fc <module_user_init_hook+0x58>)
 80a08be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a08c0:	d001      	beq.n	80a08c6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a08c2:	f7ff ffb1 	bl	80a0828 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a08c6:	f7ff fd5f 	bl	80a0388 <HAL_RNG_GetRandomNumber>
 80a08ca:	4604      	mov	r4, r0
    srand(seed);
 80a08cc:	f000 fba2 	bl	80a1014 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a08d0:	4b0b      	ldr	r3, [pc, #44]	; (80a0900 <module_user_init_hook+0x5c>)
 80a08d2:	b113      	cbz	r3, 80a08da <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a08d4:	4620      	mov	r0, r4
 80a08d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a08da:	2100      	movs	r1, #0
 80a08dc:	4808      	ldr	r0, [pc, #32]	; (80a0900 <module_user_init_hook+0x5c>)
 80a08de:	f7ff feb9 	bl	80a0654 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a08e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a08e6:	2100      	movs	r1, #0
 80a08e8:	4806      	ldr	r0, [pc, #24]	; (80a0904 <module_user_init_hook+0x60>)
 80a08ea:	f7ff be3f 	b.w	80a056c <system_ctrl_set_app_request_handler>
 80a08ee:	bf00      	nop
 80a08f0:	080a07a9 	.word	0x080a07a9
 80a08f4:	40024000 	.word	0x40024000
 80a08f8:	9a271c1e 	.word	0x9a271c1e
 80a08fc:	20000098 	.word	0x20000098
 80a0900:	00000000 	.word	0x00000000
 80a0904:	080a086d 	.word	0x080a086d

080a0908 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0908:	4770      	bx	lr

080a090a <_ZN9IPAddressD0Ev>:
 80a090a:	b510      	push	{r4, lr}
 80a090c:	4604      	mov	r4, r0
 80a090e:	2118      	movs	r1, #24
 80a0910:	f000 fb60 	bl	80a0fd4 <_ZdlPvj>
 80a0914:	4620      	mov	r0, r4
 80a0916:	bd10      	pop	{r4, pc}

080a0918 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a091a:	460e      	mov	r6, r1
 80a091c:	2400      	movs	r4, #0
 80a091e:	f100 0708 	add.w	r7, r0, #8
 80a0922:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0924:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0928:	220a      	movs	r2, #10
 80a092a:	4630      	mov	r0, r6
 80a092c:	f7ff fefd 	bl	80a072a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0930:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0932:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0934:	d101      	bne.n	80a093a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0936:	4620      	mov	r0, r4
 80a0938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a093a:	2c00      	cmp	r4, #0
 80a093c:	d0f2      	beq.n	80a0924 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a093e:	212e      	movs	r1, #46	; 0x2e
 80a0940:	4630      	mov	r0, r6
 80a0942:	f7ff feef 	bl	80a0724 <_ZN5Print5printEc>
 80a0946:	4404      	add	r4, r0
 80a0948:	e7ec      	b.n	80a0924 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a094c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a094c:	b510      	push	{r4, lr}
 80a094e:	4604      	mov	r4, r0
 80a0950:	4b04      	ldr	r3, [pc, #16]	; (80a0964 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0952:	2211      	movs	r2, #17
 80a0954:	2100      	movs	r1, #0
 80a0956:	f840 3b04 	str.w	r3, [r0], #4
 80a095a:	f000 fb53 	bl	80a1004 <memset>
}
 80a095e:	4620      	mov	r0, r4
 80a0960:	bd10      	pop	{r4, pc}
 80a0962:	bf00      	nop
 80a0964:	080a1178 	.word	0x080a1178

080a0968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0968:	4603      	mov	r3, r0
 80a096a:	4a07      	ldr	r2, [pc, #28]	; (80a0988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a096c:	b510      	push	{r4, lr}
 80a096e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0972:	f101 0210 	add.w	r2, r1, #16
 80a0976:	f851 4b04 	ldr.w	r4, [r1], #4
 80a097a:	4291      	cmp	r1, r2
 80a097c:	f843 4b04 	str.w	r4, [r3], #4
 80a0980:	d1f9      	bne.n	80a0976 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0982:	780a      	ldrb	r2, [r1, #0]
 80a0984:	701a      	strb	r2, [r3, #0]
}
 80a0986:	bd10      	pop	{r4, pc}
 80a0988:	080a1178 	.word	0x080a1178

080a098c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a098c:	4a02      	ldr	r2, [pc, #8]	; (80a0998 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a098e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0992:	2204      	movs	r2, #4
 80a0994:	7502      	strb	r2, [r0, #20]
}
 80a0996:	4770      	bx	lr
 80a0998:	080a1178 	.word	0x080a1178

080a099c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a099c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a099e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a09a2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a09a6:	2304      	movs	r3, #4
 80a09a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a09ac:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a09b0:	6044      	str	r4, [r0, #4]
 80a09b2:	7503      	strb	r3, [r0, #20]
}
 80a09b4:	bd10      	pop	{r4, pc}
	...

080a09b8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09ba:	4d04      	ldr	r5, [pc, #16]	; (80a09cc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09bc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09be:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a09c2:	9500      	str	r5, [sp, #0]
 80a09c4:	f7ff ffea 	bl	80a099c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a09c8:	b003      	add	sp, #12
 80a09ca:	bd30      	pop	{r4, r5, pc}
 80a09cc:	080a1178 	.word	0x080a1178

080a09d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a09d0:	7441      	strb	r1, [r0, #17]
}
 80a09d2:	4770      	bx	lr

080a09d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09d4:	4770      	bx	lr

080a09d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a09d6:	4770      	bx	lr

080a09d8 <_ZN9USBSerial4readEv>:
{
 80a09d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a09da:	2100      	movs	r1, #0
 80a09dc:	7c00      	ldrb	r0, [r0, #16]
 80a09de:	f7ff fd95 	bl	80a050c <HAL_USB_USART_Receive_Data>
}
 80a09e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09e6:	bd08      	pop	{r3, pc}

080a09e8 <_ZN9USBSerial4peekEv>:
{
 80a09e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a09ea:	2101      	movs	r1, #1
 80a09ec:	7c00      	ldrb	r0, [r0, #16]
 80a09ee:	f7ff fd8d 	bl	80a050c <HAL_USB_USART_Receive_Data>
}
 80a09f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09f6:	bd08      	pop	{r3, pc}

080a09f8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a09f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a09fa:	7c00      	ldrb	r0, [r0, #16]
 80a09fc:	f7ff fd7e 	bl	80a04fc <HAL_USB_USART_Available_Data_For_Write>
}
 80a0a00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a04:	bd08      	pop	{r3, pc}

080a0a06 <_ZN9USBSerial9availableEv>:
{
 80a0a06:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0a08:	7c00      	ldrb	r0, [r0, #16]
 80a0a0a:	f7ff fd6f 	bl	80a04ec <HAL_USB_USART_Available_Data>
}
 80a0a0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a12:	bd08      	pop	{r3, pc}

080a0a14 <_ZN9USBSerial5writeEh>:
{
 80a0a14:	b538      	push	{r3, r4, r5, lr}
 80a0a16:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a18:	7c00      	ldrb	r0, [r0, #16]
{
 80a0a1a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a1c:	f7ff fd6e 	bl	80a04fc <HAL_USB_USART_Available_Data_For_Write>
 80a0a20:	2800      	cmp	r0, #0
 80a0a22:	dc01      	bgt.n	80a0a28 <_ZN9USBSerial5writeEh+0x14>
 80a0a24:	7c60      	ldrb	r0, [r4, #17]
 80a0a26:	b128      	cbz	r0, 80a0a34 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0a28:	4629      	mov	r1, r5
 80a0a2a:	7c20      	ldrb	r0, [r4, #16]
 80a0a2c:	f7ff fd76 	bl	80a051c <HAL_USB_USART_Send_Data>
 80a0a30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0a34:	bd38      	pop	{r3, r4, r5, pc}

080a0a36 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0a36:	7c00      	ldrb	r0, [r0, #16]
 80a0a38:	f7ff bd78 	b.w	80a052c <HAL_USB_USART_Flush_Data>

080a0a3c <_ZN9USBSerialD0Ev>:
 80a0a3c:	b510      	push	{r4, lr}
 80a0a3e:	4604      	mov	r4, r0
 80a0a40:	2114      	movs	r1, #20
 80a0a42:	f000 fac7 	bl	80a0fd4 <_ZdlPvj>
 80a0a46:	4620      	mov	r0, r4
 80a0a48:	bd10      	pop	{r4, pc}

080a0a4a <__tcf_1>:
 80a0a4a:	4770      	bx	lr

080a0a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a4c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a52:	4604      	mov	r4, r0
 80a0a54:	4608      	mov	r0, r1
 80a0a56:	2100      	movs	r1, #0
 80a0a58:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a5c:	4b04      	ldr	r3, [pc, #16]	; (80a0a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0a5e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a60:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0a62:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0a64:	4611      	mov	r1, r2
  _blocking = true;
 80a0a66:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0a68:	f7ff fd38 	bl	80a04dc <HAL_USB_USART_Init>
}
 80a0a6c:	4620      	mov	r0, r4
 80a0a6e:	bd10      	pop	{r4, pc}
 80a0a70:	080a118c 	.word	0x080a118c

080a0a74 <_Z19acquireSerialBufferv>:
{
 80a0a74:	b510      	push	{r4, lr}
 80a0a76:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a78:	2214      	movs	r2, #20
 80a0a7a:	2100      	movs	r1, #0
 80a0a7c:	f000 fac2 	bl	80a1004 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0a80:	4b05      	ldr	r3, [pc, #20]	; (80a0a98 <_Z19acquireSerialBufferv+0x24>)
}
 80a0a82:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0a84:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0a86:	4b05      	ldr	r3, [pc, #20]	; (80a0a9c <_Z19acquireSerialBufferv+0x28>)
 80a0a88:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a8a:	f240 1301 	movw	r3, #257	; 0x101
 80a0a8e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a90:	2381      	movs	r3, #129	; 0x81
 80a0a92:	8223      	strh	r3, [r4, #16]
}
 80a0a94:	bd10      	pop	{r4, pc}
 80a0a96:	bf00      	nop
 80a0a98:	200000d0 	.word	0x200000d0
 80a0a9c:	200001d1 	.word	0x200001d1

080a0aa0 <_Z16_fetch_usbserialv>:
{
 80a0aa0:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0aa2:	4d0e      	ldr	r5, [pc, #56]	; (80a0adc <_Z16_fetch_usbserialv+0x3c>)
{
 80a0aa4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0aa6:	a801      	add	r0, sp, #4
 80a0aa8:	f7ff ffe4 	bl	80a0a74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0aac:	7829      	ldrb	r1, [r5, #0]
 80a0aae:	f3bf 8f5b 	dmb	ish
 80a0ab2:	f011 0401 	ands.w	r4, r1, #1
 80a0ab6:	d10e      	bne.n	80a0ad6 <_Z16_fetch_usbserialv+0x36>
 80a0ab8:	4628      	mov	r0, r5
 80a0aba:	f7ff faf0 	bl	80a009e <__cxa_guard_acquire>
 80a0abe:	b150      	cbz	r0, 80a0ad6 <_Z16_fetch_usbserialv+0x36>
 80a0ac0:	4621      	mov	r1, r4
 80a0ac2:	aa01      	add	r2, sp, #4
 80a0ac4:	4806      	ldr	r0, [pc, #24]	; (80a0ae0 <_Z16_fetch_usbserialv+0x40>)
 80a0ac6:	f7ff ffc1 	bl	80a0a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0aca:	4628      	mov	r0, r5
 80a0acc:	f7ff faec 	bl	80a00a8 <__cxa_guard_release>
 80a0ad0:	4804      	ldr	r0, [pc, #16]	; (80a0ae4 <_Z16_fetch_usbserialv+0x44>)
 80a0ad2:	f000 fa83 	bl	80a0fdc <atexit>
	return _usbserial;
}
 80a0ad6:	4802      	ldr	r0, [pc, #8]	; (80a0ae0 <_Z16_fetch_usbserialv+0x40>)
 80a0ad8:	b007      	add	sp, #28
 80a0ada:	bd30      	pop	{r4, r5, pc}
 80a0adc:	200000a0 	.word	0x200000a0
 80a0ae0:	200000a8 	.word	0x200000a8
 80a0ae4:	080a09d5 	.word	0x080a09d5

080a0ae8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ae8:	b510      	push	{r4, lr}
 80a0aea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0aec:	2214      	movs	r2, #20
 80a0aee:	2100      	movs	r1, #0
 80a0af0:	f000 fa88 	bl	80a1004 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0af4:	4b05      	ldr	r3, [pc, #20]	; (80a0b0c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0af6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0af8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0afa:	4b05      	ldr	r3, [pc, #20]	; (80a0b10 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0afc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0afe:	f240 1301 	movw	r3, #257	; 0x101
 80a0b02:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0b04:	2381      	movs	r3, #129	; 0x81
 80a0b06:	8223      	strh	r3, [r4, #16]
}
 80a0b08:	bd10      	pop	{r4, pc}
 80a0b0a:	bf00      	nop
 80a0b0c:	20000252 	.word	0x20000252
 80a0b10:	20000353 	.word	0x20000353

080a0b14 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b16:	4c0e      	ldr	r4, [pc, #56]	; (80a0b50 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0b18:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b1a:	a801      	add	r0, sp, #4
 80a0b1c:	f7ff ffe4 	bl	80a0ae8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b20:	7823      	ldrb	r3, [r4, #0]
 80a0b22:	f3bf 8f5b 	dmb	ish
 80a0b26:	07db      	lsls	r3, r3, #31
 80a0b28:	d40e      	bmi.n	80a0b48 <_Z17_fetch_usbserial1v+0x34>
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	f7ff fab7 	bl	80a009e <__cxa_guard_acquire>
 80a0b30:	b150      	cbz	r0, 80a0b48 <_Z17_fetch_usbserial1v+0x34>
 80a0b32:	2101      	movs	r1, #1
 80a0b34:	aa01      	add	r2, sp, #4
 80a0b36:	4807      	ldr	r0, [pc, #28]	; (80a0b54 <_Z17_fetch_usbserial1v+0x40>)
 80a0b38:	f7ff ff88 	bl	80a0a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b3c:	4620      	mov	r0, r4
 80a0b3e:	f7ff fab3 	bl	80a00a8 <__cxa_guard_release>
 80a0b42:	4805      	ldr	r0, [pc, #20]	; (80a0b58 <_Z17_fetch_usbserial1v+0x44>)
 80a0b44:	f000 fa4a 	bl	80a0fdc <atexit>
  return _usbserial1;
}
 80a0b48:	4802      	ldr	r0, [pc, #8]	; (80a0b54 <_Z17_fetch_usbserial1v+0x40>)
 80a0b4a:	b006      	add	sp, #24
 80a0b4c:	bd10      	pop	{r4, pc}
 80a0b4e:	bf00      	nop
 80a0b50:	200000a4 	.word	0x200000a4
 80a0b54:	200000bc 	.word	0x200000bc
 80a0b58:	080a0a4b 	.word	0x080a0a4b

080a0b5c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0b5c:	4770      	bx	lr

080a0b5e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b5e:	7441      	strb	r1, [r0, #17]
}
 80a0b60:	4770      	bx	lr

080a0b62 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b62:	4770      	bx	lr

080a0b64 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0b64:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0b66:	7c00      	ldrb	r0, [r0, #16]
 80a0b68:	f7ff fc66 	bl	80a0438 <hal_usart_available_data_for_write>
}
 80a0b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b70:	bd08      	pop	{r3, pc}

080a0b72 <_ZN11USARTSerial9availableEv>:
{
 80a0b72:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0b74:	7c00      	ldrb	r0, [r0, #16]
 80a0b76:	f7ff fc37 	bl	80a03e8 <hal_usart_available>
}
 80a0b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b7e:	bd08      	pop	{r3, pc}

080a0b80 <_ZN11USARTSerial4peekEv>:
{
 80a0b80:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0b82:	7c00      	ldrb	r0, [r0, #16]
 80a0b84:	f7ff fc40 	bl	80a0408 <hal_usart_peek>
}
 80a0b88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b8c:	bd08      	pop	{r3, pc}

080a0b8e <_ZN11USARTSerial4readEv>:
{
 80a0b8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0b90:	7c00      	ldrb	r0, [r0, #16]
 80a0b92:	f7ff fc31 	bl	80a03f8 <hal_usart_read>
}
 80a0b96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b9a:	bd08      	pop	{r3, pc}

080a0b9c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a0b9c:	7c00      	ldrb	r0, [r0, #16]
 80a0b9e:	f7ff bc3b 	b.w	80a0418 <hal_usart_flush>

080a0ba2 <_ZN11USARTSerial5writeEh>:
{
 80a0ba2:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ba4:	7c46      	ldrb	r6, [r0, #17]
{
 80a0ba6:	4604      	mov	r4, r0
 80a0ba8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0baa:	b12e      	cbz	r6, 80a0bb8 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a0bac:	4629      	mov	r1, r5
 80a0bae:	7c20      	ldrb	r0, [r4, #16]
}
 80a0bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0bb4:	f7ff bc10 	b.w	80a03d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bb8:	7c00      	ldrb	r0, [r0, #16]
 80a0bba:	f7ff fc3d 	bl	80a0438 <hal_usart_available_data_for_write>
 80a0bbe:	2800      	cmp	r0, #0
 80a0bc0:	dcf4      	bgt.n	80a0bac <_ZN11USARTSerial5writeEh+0xa>
}
 80a0bc2:	4630      	mov	r0, r6
 80a0bc4:	bd70      	pop	{r4, r5, r6, pc}

080a0bc6 <_ZN11USARTSerialD0Ev>:
 80a0bc6:	b510      	push	{r4, lr}
 80a0bc8:	4604      	mov	r4, r0
 80a0bca:	2114      	movs	r1, #20
 80a0bcc:	f000 fa02 	bl	80a0fd4 <_ZdlPvj>
 80a0bd0:	4620      	mov	r0, r4
 80a0bd2:	bd10      	pop	{r4, pc}

080a0bd4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0bd4:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0bd8:	b510      	push	{r4, lr}
 80a0bda:	4604      	mov	r4, r0
 80a0bdc:	4608      	mov	r0, r1
 80a0bde:	4611      	mov	r1, r2
 80a0be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0be4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0be8:	4a04      	ldr	r2, [pc, #16]	; (80a0bfc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0bea:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0bec:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0bee:	2201      	movs	r2, #1
 80a0bf0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0bf2:	461a      	mov	r2, r3
 80a0bf4:	f7ff fbe8 	bl	80a03c8 <hal_usart_init>
}
 80a0bf8:	4620      	mov	r0, r4
 80a0bfa:	bd10      	pop	{r4, pc}
 80a0bfc:	080a11bc 	.word	0x080a11bc

080a0c00 <_Z22__fetch_global_Serial1v>:
{
 80a0c00:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0c02:	4d0c      	ldr	r5, [pc, #48]	; (80a0c34 <_Z22__fetch_global_Serial1v+0x34>)
 80a0c04:	7829      	ldrb	r1, [r5, #0]
 80a0c06:	f3bf 8f5b 	dmb	ish
 80a0c0a:	f011 0401 	ands.w	r4, r1, #1
 80a0c0e:	d10f      	bne.n	80a0c30 <_Z22__fetch_global_Serial1v+0x30>
 80a0c10:	4628      	mov	r0, r5
 80a0c12:	f7ff fa44 	bl	80a009e <__cxa_guard_acquire>
 80a0c16:	b158      	cbz	r0, 80a0c30 <_Z22__fetch_global_Serial1v+0x30>
 80a0c18:	4621      	mov	r1, r4
 80a0c1a:	4b07      	ldr	r3, [pc, #28]	; (80a0c38 <_Z22__fetch_global_Serial1v+0x38>)
 80a0c1c:	4a07      	ldr	r2, [pc, #28]	; (80a0c3c <_Z22__fetch_global_Serial1v+0x3c>)
 80a0c1e:	4808      	ldr	r0, [pc, #32]	; (80a0c40 <_Z22__fetch_global_Serial1v+0x40>)
 80a0c20:	f7ff ffd8 	bl	80a0bd4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0c24:	4628      	mov	r0, r5
 80a0c26:	f7ff fa3f 	bl	80a00a8 <__cxa_guard_release>
 80a0c2a:	4806      	ldr	r0, [pc, #24]	; (80a0c44 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c2c:	f000 f9d6 	bl	80a0fdc <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0c30:	4803      	ldr	r0, [pc, #12]	; (80a0c40 <_Z22__fetch_global_Serial1v+0x40>)
 80a0c32:	bd38      	pop	{r3, r4, r5, pc}
 80a0c34:	200003d4 	.word	0x200003d4
 80a0c38:	2000045c 	.word	0x2000045c
 80a0c3c:	200003d8 	.word	0x200003d8
 80a0c40:	200004e0 	.word	0x200004e0
 80a0c44:	080a0b63 	.word	0x080a0b63

080a0c48 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0c48:	4770      	bx	lr

080a0c4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c4c:	4606      	mov	r6, r0
 80a0c4e:	4615      	mov	r5, r2
 80a0c50:	460c      	mov	r4, r1
 80a0c52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c54:	42bc      	cmp	r4, r7
 80a0c56:	d006      	beq.n	80a0c66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c58:	6833      	ldr	r3, [r6, #0]
 80a0c5a:	4630      	mov	r0, r6
 80a0c5c:	689b      	ldr	r3, [r3, #8]
 80a0c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c62:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c64:	e7f6      	b.n	80a0c54 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c66:	4628      	mov	r0, r5
 80a0c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c6a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c6a:	2200      	movs	r2, #0
 80a0c6c:	7c00      	ldrb	r0, [r0, #16]
 80a0c6e:	f7ff bbeb 	b.w	80a0448 <hal_i2c_write>

080a0c72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c72:	2100      	movs	r1, #0
 80a0c74:	7c00      	ldrb	r0, [r0, #16]
 80a0c76:	f7ff bbef 	b.w	80a0458 <hal_i2c_available>

080a0c7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c7a:	2100      	movs	r1, #0
 80a0c7c:	7c00      	ldrb	r0, [r0, #16]
 80a0c7e:	f7ff bbf3 	b.w	80a0468 <hal_i2c_read>

080a0c82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c82:	2100      	movs	r1, #0
 80a0c84:	7c00      	ldrb	r0, [r0, #16]
 80a0c86:	f7ff bbf7 	b.w	80a0478 <hal_i2c_peek>

080a0c8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c8a:	2100      	movs	r1, #0
 80a0c8c:	7c00      	ldrb	r0, [r0, #16]
 80a0c8e:	f7ff bbfb 	b.w	80a0488 <hal_i2c_flush>

080a0c92 <_ZN7TwoWireD0Ev>:
 80a0c92:	b510      	push	{r4, lr}
 80a0c94:	4604      	mov	r4, r0
 80a0c96:	2114      	movs	r1, #20
 80a0c98:	f000 f99c 	bl	80a0fd4 <_ZdlPvj>
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	bd10      	pop	{r4, pc}

080a0ca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0ca0:	b510      	push	{r4, lr}
 80a0ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ca6:	4604      	mov	r4, r0
 80a0ca8:	4608      	mov	r0, r1
 80a0caa:	2100      	movs	r1, #0
 80a0cac:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0cb0:	4b03      	ldr	r3, [pc, #12]	; (80a0cc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0cb2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0cb4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0cb6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0cb8:	f7ff fbf6 	bl	80a04a8 <hal_i2c_init>
}
 80a0cbc:	4620      	mov	r0, r4
 80a0cbe:	bd10      	pop	{r4, pc}
 80a0cc0:	080a11ec 	.word	0x080a11ec

080a0cc4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0cc4:	2200      	movs	r2, #0
 80a0cc6:	6840      	ldr	r0, [r0, #4]
 80a0cc8:	4611      	mov	r1, r2
 80a0cca:	f7ff bc7b 	b.w	80a05c4 <network_ready>

080a0cce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cd0:	4615      	mov	r5, r2
 80a0cd2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0cd4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0cd6:	460e      	mov	r6, r1
 80a0cd8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0cda:	2100      	movs	r1, #0
 80a0cdc:	a803      	add	r0, sp, #12
 80a0cde:	f000 f991 	bl	80a1004 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ce2:	4628      	mov	r0, r5
 80a0ce4:	f000 f9ba 	bl	80a105c <strlen>
 80a0ce8:	2700      	movs	r7, #0
 80a0cea:	b281      	uxth	r1, r0
 80a0cec:	6873      	ldr	r3, [r6, #4]
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	9700      	str	r7, [sp, #0]
 80a0cf2:	aa03      	add	r2, sp, #12
 80a0cf4:	f7ff fc22 	bl	80a053c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0cf8:	b130      	cbz	r0, 80a0d08 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0cfa:	4639      	mov	r1, r7
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	f7ff fe45 	bl	80a098c <_ZN9IPAddressC1Em>
    }
 80a0d02:	4620      	mov	r0, r4
 80a0d04:	b009      	add	sp, #36	; 0x24
 80a0d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	a903      	add	r1, sp, #12
 80a0d0c:	f7ff fe2c 	bl	80a0968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0d10:	e7f7      	b.n	80a0d02 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0d12 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0d12:	2200      	movs	r2, #0
 80a0d14:	6840      	ldr	r0, [r0, #4]
 80a0d16:	4611      	mov	r1, r2
 80a0d18:	f7ff bc74 	b.w	80a0604 <network_listening>

080a0d1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0d1c:	2200      	movs	r2, #0
 80a0d1e:	6840      	ldr	r0, [r0, #4]
 80a0d20:	4611      	mov	r1, r2
 80a0d22:	f7ff bc7f 	b.w	80a0624 <network_get_listen_timeout>

080a0d26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0d26:	2200      	movs	r2, #0
 80a0d28:	6840      	ldr	r0, [r0, #4]
 80a0d2a:	f7ff bc73 	b.w	80a0614 <network_set_listen_timeout>

080a0d2e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0d2e:	2200      	movs	r2, #0
 80a0d30:	6840      	ldr	r0, [r0, #4]
 80a0d32:	f081 0101 	eor.w	r1, r1, #1
 80a0d36:	f7ff bc5d 	b.w	80a05f4 <network_listen>

080a0d3a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0d3a:	2300      	movs	r3, #0
 80a0d3c:	6840      	ldr	r0, [r0, #4]
 80a0d3e:	461a      	mov	r2, r3
 80a0d40:	4619      	mov	r1, r3
 80a0d42:	f7ff bc4f 	b.w	80a05e4 <network_off>

080a0d46 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0d46:	2200      	movs	r2, #0
 80a0d48:	6840      	ldr	r0, [r0, #4]
 80a0d4a:	4611      	mov	r1, r2
 80a0d4c:	f7ff bc2a 	b.w	80a05a4 <network_connecting>

080a0d50 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0d50:	2200      	movs	r2, #0
 80a0d52:	2102      	movs	r1, #2
 80a0d54:	6840      	ldr	r0, [r0, #4]
 80a0d56:	f7ff bc2d 	b.w	80a05b4 <network_disconnect>

080a0d5a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0d5a:	2300      	movs	r3, #0
 80a0d5c:	6840      	ldr	r0, [r0, #4]
 80a0d5e:	461a      	mov	r2, r3
 80a0d60:	f7ff bc18 	b.w	80a0594 <network_connect>

080a0d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0d64:	2204      	movs	r2, #4
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d6a:	4a02      	ldr	r2, [pc, #8]	; (80a0d74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d6c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0d6e:	4770      	bx	lr
 80a0d70:	200004f4 	.word	0x200004f4
 80a0d74:	080a1214 	.word	0x080a1214

080a0d78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d78:	2300      	movs	r3, #0
 80a0d7a:	6840      	ldr	r0, [r0, #4]
 80a0d7c:	461a      	mov	r2, r3
 80a0d7e:	f7ff bc09 	b.w	80a0594 <network_connect>

080a0d82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d82:	2200      	movs	r2, #0
 80a0d84:	2102      	movs	r1, #2
 80a0d86:	6840      	ldr	r0, [r0, #4]
 80a0d88:	f7ff bc14 	b.w	80a05b4 <network_disconnect>

080a0d8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d8c:	2200      	movs	r2, #0
 80a0d8e:	6840      	ldr	r0, [r0, #4]
 80a0d90:	4611      	mov	r1, r2
 80a0d92:	f7ff bc07 	b.w	80a05a4 <network_connecting>

080a0d96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d96:	2200      	movs	r2, #0
 80a0d98:	6840      	ldr	r0, [r0, #4]
 80a0d9a:	4611      	mov	r1, r2
 80a0d9c:	f7ff bc12 	b.w	80a05c4 <network_ready>

080a0da0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0da0:	2300      	movs	r3, #0
 80a0da2:	6840      	ldr	r0, [r0, #4]
 80a0da4:	461a      	mov	r2, r3
 80a0da6:	4619      	mov	r1, r3
 80a0da8:	f7ff bc14 	b.w	80a05d4 <network_on>

080a0dac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0dac:	2300      	movs	r3, #0
 80a0dae:	6840      	ldr	r0, [r0, #4]
 80a0db0:	461a      	mov	r2, r3
 80a0db2:	4619      	mov	r1, r3
 80a0db4:	f7ff bc16 	b.w	80a05e4 <network_off>

080a0db8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0db8:	2100      	movs	r1, #0
 80a0dba:	6840      	ldr	r0, [r0, #4]
 80a0dbc:	f7ff bc3a 	b.w	80a0634 <network_is_on>

080a0dc0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0dc0:	2100      	movs	r1, #0
 80a0dc2:	6840      	ldr	r0, [r0, #4]
 80a0dc4:	f7ff bc3e 	b.w	80a0644 <network_is_off>

080a0dc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0dc8:	2200      	movs	r2, #0
 80a0dca:	6840      	ldr	r0, [r0, #4]
 80a0dcc:	f081 0101 	eor.w	r1, r1, #1
 80a0dd0:	f7ff bc10 	b.w	80a05f4 <network_listen>

080a0dd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0dd4:	2200      	movs	r2, #0
 80a0dd6:	6840      	ldr	r0, [r0, #4]
 80a0dd8:	f7ff bc1c 	b.w	80a0614 <network_set_listen_timeout>

080a0ddc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0ddc:	2200      	movs	r2, #0
 80a0dde:	6840      	ldr	r0, [r0, #4]
 80a0de0:	4611      	mov	r1, r2
 80a0de2:	f7ff bc1f 	b.w	80a0624 <network_get_listen_timeout>

080a0de6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0de6:	2200      	movs	r2, #0
 80a0de8:	6840      	ldr	r0, [r0, #4]
 80a0dea:	4611      	mov	r1, r2
 80a0dec:	f7ff bc0a 	b.w	80a0604 <network_listening>

080a0df0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0df0:	b570      	push	{r4, r5, r6, lr}
 80a0df2:	4615      	mov	r5, r2
 80a0df4:	b08e      	sub	sp, #56	; 0x38
 80a0df6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0df8:	a808      	add	r0, sp, #32
 80a0dfa:	f7ff fda7 	bl	80a094c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0dfe:	2211      	movs	r2, #17
 80a0e00:	2100      	movs	r1, #0
 80a0e02:	a803      	add	r0, sp, #12
 80a0e04:	f000 f8fe 	bl	80a1004 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e08:	2600      	movs	r6, #0
 80a0e0a:	4628      	mov	r0, r5
 80a0e0c:	f000 f926 	bl	80a105c <strlen>
 80a0e10:	4b0a      	ldr	r3, [pc, #40]	; (80a0e3c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e12:	9600      	str	r6, [sp, #0]
 80a0e14:	b281      	uxth	r1, r0
 80a0e16:	685b      	ldr	r3, [r3, #4]
 80a0e18:	4628      	mov	r0, r5
 80a0e1a:	aa03      	add	r2, sp, #12
 80a0e1c:	f7ff fb8e 	bl	80a053c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e20:	b130      	cbz	r0, 80a0e30 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0e22:	4631      	mov	r1, r6
 80a0e24:	4620      	mov	r0, r4
 80a0e26:	f7ff fdb1 	bl	80a098c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e2a:	4620      	mov	r0, r4
 80a0e2c:	b00e      	add	sp, #56	; 0x38
 80a0e2e:	bd70      	pop	{r4, r5, r6, pc}
 80a0e30:	4620      	mov	r0, r4
 80a0e32:	a903      	add	r1, sp, #12
 80a0e34:	f7ff fd98 	bl	80a0968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e38:	e7f7      	b.n	80a0e2a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e3a:	bf00      	nop
 80a0e3c:	200004f4 	.word	0x200004f4

080a0e40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0e40:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e42:	4a03      	ldr	r2, [pc, #12]	; (80a0e50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e44:	601a      	str	r2, [r3, #0]
 80a0e46:	2200      	movs	r2, #0
 80a0e48:	605a      	str	r2, [r3, #4]

} // spark
 80a0e4a:	4770      	bx	lr
 80a0e4c:	200004fc 	.word	0x200004fc
 80a0e50:	080a1250 	.word	0x080a1250

080a0e54 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0e54:	4b02      	ldr	r3, [pc, #8]	; (80a0e60 <__tcf_0+0xc>)
 80a0e56:	6898      	ldr	r0, [r3, #8]
 80a0e58:	b108      	cbz	r0, 80a0e5e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0e5a:	f7ff baad 	b.w	80a03b8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0e5e:	4770      	bx	lr
 80a0e60:	20000508 	.word	0x20000508

080a0e64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0e64:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0e66:	b570      	push	{r4, r5, r6, lr}
 80a0e68:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0e6a:	d901      	bls.n	80a0e70 <pinAvailable+0xc>
    return false;
 80a0e6c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0e6e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0e70:	f1a0 030d 	sub.w	r3, r0, #13
 80a0e74:	2b02      	cmp	r3, #2
 80a0e76:	d90b      	bls.n	80a0e90 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0e78:	2801      	cmp	r0, #1
 80a0e7a:	d824      	bhi.n	80a0ec6 <pinAvailable+0x62>
 80a0e7c:	f000 f886 	bl	80a0f8c <_Z19__fetch_global_Wirev>
 80a0e80:	2100      	movs	r1, #0
 80a0e82:	7c00      	ldrb	r0, [r0, #16]
 80a0e84:	f7ff fb08 	bl	80a0498 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0e88:	f080 0001 	eor.w	r0, r0, #1
 80a0e8c:	b2c0      	uxtb	r0, r0
 80a0e8e:	e7ee      	b.n	80a0e6e <pinAvailable+0xa>
 80a0e90:	4e12      	ldr	r6, [pc, #72]	; (80a0edc <pinAvailable+0x78>)
 80a0e92:	7831      	ldrb	r1, [r6, #0]
 80a0e94:	f3bf 8f5b 	dmb	ish
 80a0e98:	f011 0501 	ands.w	r5, r1, #1
 80a0e9c:	d10d      	bne.n	80a0eba <pinAvailable+0x56>
 80a0e9e:	4630      	mov	r0, r6
 80a0ea0:	f7ff f8fd 	bl	80a009e <__cxa_guard_acquire>
 80a0ea4:	b148      	cbz	r0, 80a0eba <pinAvailable+0x56>
 80a0ea6:	4629      	mov	r1, r5
 80a0ea8:	480d      	ldr	r0, [pc, #52]	; (80a0ee0 <pinAvailable+0x7c>)
 80a0eaa:	f7ff fbf3 	bl	80a0694 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0eae:	4630      	mov	r0, r6
 80a0eb0:	f7ff f8fa 	bl	80a00a8 <__cxa_guard_release>
 80a0eb4:	480b      	ldr	r0, [pc, #44]	; (80a0ee4 <pinAvailable+0x80>)
 80a0eb6:	f000 f891 	bl	80a0fdc <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0eba:	4b09      	ldr	r3, [pc, #36]	; (80a0ee0 <pinAvailable+0x7c>)
 80a0ebc:	7818      	ldrb	r0, [r3, #0]
 80a0ebe:	f7ff fb05 	bl	80a04cc <hal_spi_is_enabled>
 80a0ec2:	2800      	cmp	r0, #0
 80a0ec4:	d1d2      	bne.n	80a0e6c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0ec6:	3c12      	subs	r4, #18
 80a0ec8:	2c01      	cmp	r4, #1
 80a0eca:	d805      	bhi.n	80a0ed8 <pinAvailable+0x74>
 80a0ecc:	f7ff fe98 	bl	80a0c00 <_Z22__fetch_global_Serial1v>
 80a0ed0:	7c00      	ldrb	r0, [r0, #16]
 80a0ed2:	f7ff faa9 	bl	80a0428 <hal_usart_is_enabled>
 80a0ed6:	e7d7      	b.n	80a0e88 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0ed8:	2001      	movs	r0, #1
 80a0eda:	e7c8      	b.n	80a0e6e <pinAvailable+0xa>
 80a0edc:	20000504 	.word	0x20000504
 80a0ee0:	20000508 	.word	0x20000508
 80a0ee4:	080a0e55 	.word	0x080a0e55

080a0ee8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ee8:	2817      	cmp	r0, #23
{
 80a0eea:	b538      	push	{r3, r4, r5, lr}
 80a0eec:	4604      	mov	r4, r0
 80a0eee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ef0:	d80a      	bhi.n	80a0f08 <pinMode+0x20>
 80a0ef2:	29ff      	cmp	r1, #255	; 0xff
 80a0ef4:	d008      	beq.n	80a0f08 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0ef6:	f7ff ffb5 	bl	80a0e64 <pinAvailable>
 80a0efa:	b128      	cbz	r0, 80a0f08 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0efc:	4629      	mov	r1, r5
 80a0efe:	4620      	mov	r0, r4
}
 80a0f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0f04:	f7ff ba28 	b.w	80a0358 <HAL_Pin_Mode>
}
 80a0f08:	bd38      	pop	{r3, r4, r5, pc}

080a0f0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0f0a:	b538      	push	{r3, r4, r5, lr}
 80a0f0c:	4604      	mov	r4, r0
 80a0f0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f10:	f7ff fa2a 	bl	80a0368 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0f14:	28ff      	cmp	r0, #255	; 0xff
 80a0f16:	d010      	beq.n	80a0f3a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0f18:	2806      	cmp	r0, #6
 80a0f1a:	d804      	bhi.n	80a0f26 <digitalWrite+0x1c>
 80a0f1c:	234d      	movs	r3, #77	; 0x4d
 80a0f1e:	fa23 f000 	lsr.w	r0, r3, r0
 80a0f22:	07c3      	lsls	r3, r0, #31
 80a0f24:	d409      	bmi.n	80a0f3a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f26:	4620      	mov	r0, r4
 80a0f28:	f7ff ff9c 	bl	80a0e64 <pinAvailable>
 80a0f2c:	b128      	cbz	r0, 80a0f3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f2e:	4629      	mov	r1, r5
 80a0f30:	4620      	mov	r0, r4
}
 80a0f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0f36:	f7ff ba1f 	b.w	80a0378 <HAL_GPIO_Write>
}
 80a0f3a:	bd38      	pop	{r3, r4, r5, pc}

080a0f3c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f3c:	2300      	movs	r3, #0
 80a0f3e:	b507      	push	{r0, r1, r2, lr}
 80a0f40:	461a      	mov	r2, r3
 80a0f42:	4619      	mov	r1, r3
 80a0f44:	9300      	str	r3, [sp, #0]
 80a0f46:	4803      	ldr	r0, [pc, #12]	; (80a0f54 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0f48:	f7ff fd36 	bl	80a09b8 <_ZN9IPAddressC1Ehhhh>
 80a0f4c:	b003      	add	sp, #12
 80a0f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f52:	bf00      	nop
 80a0f54:	20000518 	.word	0x20000518

080a0f58 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f58:	4770      	bx	lr
	...

080a0f5c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a0f5c:	2300      	movs	r3, #0
{
 80a0f5e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0f60:	2520      	movs	r5, #32
 80a0f62:	8043      	strh	r3, [r0, #2]
 80a0f64:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f66:	4e08      	ldr	r6, [pc, #32]	; (80a0f88 <_Z17acquireWireBufferv+0x2c>)
{
 80a0f68:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0f6a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f6c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0f6e:	6085      	str	r5, [r0, #8]
 80a0f70:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f72:	4628      	mov	r0, r5
 80a0f74:	f000 f830 	bl	80a0fd8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f78:	4631      	mov	r1, r6
	};
 80a0f7a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f7c:	4628      	mov	r0, r5
 80a0f7e:	f000 f82b 	bl	80a0fd8 <_ZnajRKSt9nothrow_t>
	};
 80a0f82:	60e0      	str	r0, [r4, #12]
}
 80a0f84:	4620      	mov	r0, r4
 80a0f86:	bd70      	pop	{r4, r5, r6, pc}
 80a0f88:	080a1284 	.word	0x080a1284

080a0f8c <_Z19__fetch_global_Wirev>:
{
 80a0f8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f8e:	4d0e      	ldr	r5, [pc, #56]	; (80a0fc8 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0f90:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f92:	7829      	ldrb	r1, [r5, #0]
 80a0f94:	f3bf 8f5b 	dmb	ish
 80a0f98:	f011 0401 	ands.w	r4, r1, #1
 80a0f9c:	d111      	bne.n	80a0fc2 <_Z19__fetch_global_Wirev+0x36>
 80a0f9e:	4628      	mov	r0, r5
 80a0fa0:	f7ff f87d 	bl	80a009e <__cxa_guard_acquire>
 80a0fa4:	b168      	cbz	r0, 80a0fc2 <_Z19__fetch_global_Wirev+0x36>
 80a0fa6:	a801      	add	r0, sp, #4
 80a0fa8:	f7ff ffd8 	bl	80a0f5c <_Z17acquireWireBufferv>
 80a0fac:	4621      	mov	r1, r4
 80a0fae:	aa01      	add	r2, sp, #4
 80a0fb0:	4806      	ldr	r0, [pc, #24]	; (80a0fcc <_Z19__fetch_global_Wirev+0x40>)
 80a0fb2:	f7ff fe75 	bl	80a0ca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0fb6:	4628      	mov	r0, r5
 80a0fb8:	f7ff f876 	bl	80a00a8 <__cxa_guard_release>
 80a0fbc:	4804      	ldr	r0, [pc, #16]	; (80a0fd0 <_Z19__fetch_global_Wirev+0x44>)
 80a0fbe:	f000 f80d 	bl	80a0fdc <atexit>
	return wire;
}
 80a0fc2:	4802      	ldr	r0, [pc, #8]	; (80a0fcc <_Z19__fetch_global_Wirev+0x40>)
 80a0fc4:	b007      	add	sp, #28
 80a0fc6:	bd30      	pop	{r4, r5, pc}
 80a0fc8:	20000530 	.word	0x20000530
 80a0fcc:	20000534 	.word	0x20000534
 80a0fd0:	080a0f59 	.word	0x080a0f59

080a0fd4 <_ZdlPvj>:
 80a0fd4:	f7ff b861 	b.w	80a009a <_ZdlPv>

080a0fd8 <_ZnajRKSt9nothrow_t>:
 80a0fd8:	f7ff b85d 	b.w	80a0096 <_Znaj>

080a0fdc <atexit>:
 80a0fdc:	2300      	movs	r3, #0
 80a0fde:	4601      	mov	r1, r0
 80a0fe0:	461a      	mov	r2, r3
 80a0fe2:	4618      	mov	r0, r3
 80a0fe4:	f000 b842 	b.w	80a106c <__register_exitproc>

080a0fe8 <memcpy>:
 80a0fe8:	440a      	add	r2, r1
 80a0fea:	4291      	cmp	r1, r2
 80a0fec:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0ff0:	d100      	bne.n	80a0ff4 <memcpy+0xc>
 80a0ff2:	4770      	bx	lr
 80a0ff4:	b510      	push	{r4, lr}
 80a0ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0ffa:	4291      	cmp	r1, r2
 80a0ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1000:	d1f9      	bne.n	80a0ff6 <memcpy+0xe>
 80a1002:	bd10      	pop	{r4, pc}

080a1004 <memset>:
 80a1004:	4603      	mov	r3, r0
 80a1006:	4402      	add	r2, r0
 80a1008:	4293      	cmp	r3, r2
 80a100a:	d100      	bne.n	80a100e <memset+0xa>
 80a100c:	4770      	bx	lr
 80a100e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1012:	e7f9      	b.n	80a1008 <memset+0x4>

080a1014 <srand>:
 80a1014:	b538      	push	{r3, r4, r5, lr}
 80a1016:	4b0d      	ldr	r3, [pc, #52]	; (80a104c <srand+0x38>)
 80a1018:	4604      	mov	r4, r0
 80a101a:	681d      	ldr	r5, [r3, #0]
 80a101c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a101e:	b97b      	cbnz	r3, 80a1040 <srand+0x2c>
 80a1020:	2018      	movs	r0, #24
 80a1022:	f7ff fb1f 	bl	80a0664 <malloc>
 80a1026:	4a0a      	ldr	r2, [pc, #40]	; (80a1050 <srand+0x3c>)
 80a1028:	4b0a      	ldr	r3, [pc, #40]	; (80a1054 <srand+0x40>)
 80a102a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a102c:	e9c0 2300 	strd	r2, r3, [r0]
 80a1030:	4b09      	ldr	r3, [pc, #36]	; (80a1058 <srand+0x44>)
 80a1032:	2201      	movs	r2, #1
 80a1034:	6083      	str	r3, [r0, #8]
 80a1036:	230b      	movs	r3, #11
 80a1038:	8183      	strh	r3, [r0, #12]
 80a103a:	2300      	movs	r3, #0
 80a103c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1040:	2200      	movs	r2, #0
 80a1042:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1044:	611c      	str	r4, [r3, #16]
 80a1046:	615a      	str	r2, [r3, #20]
 80a1048:	bd38      	pop	{r3, r4, r5, pc}
 80a104a:	bf00      	nop
 80a104c:	20000008 	.word	0x20000008
 80a1050:	abcd330e 	.word	0xabcd330e
 80a1054:	e66d1234 	.word	0xe66d1234
 80a1058:	0005deec 	.word	0x0005deec

080a105c <strlen>:
 80a105c:	4603      	mov	r3, r0
 80a105e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1062:	2a00      	cmp	r2, #0
 80a1064:	d1fb      	bne.n	80a105e <strlen+0x2>
 80a1066:	1a18      	subs	r0, r3, r0
 80a1068:	3801      	subs	r0, #1
 80a106a:	4770      	bx	lr

080a106c <__register_exitproc>:
 80a106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1070:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1130 <__register_exitproc+0xc4>
 80a1074:	4606      	mov	r6, r0
 80a1076:	f8d8 0000 	ldr.w	r0, [r8]
 80a107a:	461f      	mov	r7, r3
 80a107c:	460d      	mov	r5, r1
 80a107e:	4691      	mov	r9, r2
 80a1080:	f000 f858 	bl	80a1134 <__retarget_lock_acquire_recursive>
 80a1084:	4b26      	ldr	r3, [pc, #152]	; (80a1120 <__register_exitproc+0xb4>)
 80a1086:	681c      	ldr	r4, [r3, #0]
 80a1088:	b934      	cbnz	r4, 80a1098 <__register_exitproc+0x2c>
 80a108a:	4c26      	ldr	r4, [pc, #152]	; (80a1124 <__register_exitproc+0xb8>)
 80a108c:	601c      	str	r4, [r3, #0]
 80a108e:	4b26      	ldr	r3, [pc, #152]	; (80a1128 <__register_exitproc+0xbc>)
 80a1090:	b113      	cbz	r3, 80a1098 <__register_exitproc+0x2c>
 80a1092:	681b      	ldr	r3, [r3, #0]
 80a1094:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1098:	6863      	ldr	r3, [r4, #4]
 80a109a:	2b1f      	cmp	r3, #31
 80a109c:	dd07      	ble.n	80a10ae <__register_exitproc+0x42>
 80a109e:	f8d8 0000 	ldr.w	r0, [r8]
 80a10a2:	f000 f849 	bl	80a1138 <__retarget_lock_release_recursive>
 80a10a6:	f04f 30ff 	mov.w	r0, #4294967295
 80a10aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a10ae:	b35e      	cbz	r6, 80a1108 <__register_exitproc+0x9c>
 80a10b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a10b4:	b988      	cbnz	r0, 80a10da <__register_exitproc+0x6e>
 80a10b6:	4b1d      	ldr	r3, [pc, #116]	; (80a112c <__register_exitproc+0xc0>)
 80a10b8:	b923      	cbnz	r3, 80a10c4 <__register_exitproc+0x58>
 80a10ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a10be:	f000 f83a 	bl	80a1136 <__retarget_lock_release>
 80a10c2:	e7f0      	b.n	80a10a6 <__register_exitproc+0x3a>
 80a10c4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a10c8:	f7ff facc 	bl	80a0664 <malloc>
 80a10cc:	2800      	cmp	r0, #0
 80a10ce:	d0f4      	beq.n	80a10ba <__register_exitproc+0x4e>
 80a10d0:	2300      	movs	r3, #0
 80a10d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a10d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a10da:	2201      	movs	r2, #1
 80a10dc:	6863      	ldr	r3, [r4, #4]
 80a10de:	2e02      	cmp	r6, #2
 80a10e0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a10e4:	fa02 f203 	lsl.w	r2, r2, r3
 80a10e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a10ec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a10f0:	ea43 0302 	orr.w	r3, r3, r2
 80a10f4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a10f8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a10fc:	bf02      	ittt	eq
 80a10fe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1102:	431a      	orreq	r2, r3
 80a1104:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1108:	6863      	ldr	r3, [r4, #4]
 80a110a:	f8d8 0000 	ldr.w	r0, [r8]
 80a110e:	1c5a      	adds	r2, r3, #1
 80a1110:	3302      	adds	r3, #2
 80a1112:	6062      	str	r2, [r4, #4]
 80a1114:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1118:	f000 f80e 	bl	80a1138 <__retarget_lock_release_recursive>
 80a111c:	2000      	movs	r0, #0
 80a111e:	e7c4      	b.n	80a10aa <__register_exitproc+0x3e>
 80a1120:	200005d4 	.word	0x200005d4
 80a1124:	20000548 	.word	0x20000548
 80a1128:	00000000 	.word	0x00000000
 80a112c:	080a0665 	.word	0x080a0665
 80a1130:	2000006c 	.word	0x2000006c

080a1134 <__retarget_lock_acquire_recursive>:
 80a1134:	4770      	bx	lr

080a1136 <__retarget_lock_release>:
 80a1136:	4770      	bx	lr

080a1138 <__retarget_lock_release_recursive>:
 80a1138:	4770      	bx	lr

080a113a <link_code_end>:
	...

080a113c <dynalib_user>:
 80a113c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a114c:	0000 0000 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a115c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a116c:	6d69 0065                                   ime.

080a1170 <_ZTV9IPAddress>:
	...
 80a1178:	0919 080a 0909 080a 090b 080a               ............

080a1184 <_ZTV9USBSerial>:
	...
 80a118c:	09d7 080a 0a3d 080a 0a15 080a 06d9 080a     ....=...........
 80a119c:	0a07 080a 09d9 080a 09e9 080a 0a37 080a     ............7...
 80a11ac:	09f9 080a 09d1 080a                         ........

080a11b4 <_ZTV11USARTSerial>:
	...
 80a11bc:	0b5d 080a 0bc7 080a 0ba3 080a 06d9 080a     ]...............
 80a11cc:	0b73 080a 0b8f 080a 0b81 080a 0b9d 080a     s...............
 80a11dc:	0b5f 080a 0b65 080a                         _...e...

080a11e4 <_ZTV7TwoWire>:
	...
 80a11ec:	0c49 080a 0c93 080a 0c6b 080a 0c4b 080a     I.......k...K...
 80a11fc:	0c73 080a 0c7b 080a 0c83 080a 0c8b 080a     s...{...........

080a120c <_ZTVN5spark9WiFiClassE>:
	...
 80a1214:	0d5b 080a 0d51 080a 0d47 080a 0cc5 080a     [...Q...G.......
 80a1224:	0765 080a 0d3b 080a 0db9 080a 0dc1 080a     e...;...........
 80a1234:	0d2f 080a 0d27 080a 0d1d 080a 0d13 080a     /...'...........
 80a1244:	0ccf 080a                                   ....

080a1248 <_ZTVN5spark12NetworkClassE>:
	...
 80a1250:	0d79 080a 0d83 080a 0d8d 080a 0d97 080a     y...............
 80a1260:	0da1 080a 0dad 080a 0db9 080a 0dc1 080a     ................
 80a1270:	0dc9 080a 0dd5 080a 0ddd 080a 0de7 080a     ................
 80a1280:	0df1 080a                                   ....

080a1284 <_ZSt7nothrow>:
	...

080a1285 <link_const_variable_data_end>:
 80a1285:	00          	.byte	0x00
	...

080a1288 <link_constructors_location>:
 80a1288:	080a06b5 	.word	0x080a06b5
 80a128c:	080a0771 	.word	0x080a0771
 80a1290:	080a0781 	.word	0x080a0781
 80a1294:	080a079d 	.word	0x080a079d
 80a1298:	080a0d65 	.word	0x080a0d65
 80a129c:	080a0e41 	.word	0x080a0e41
 80a12a0:	080a0f3d 	.word	0x080a0f3d

080a12a4 <link_constructors_end>:
	...
